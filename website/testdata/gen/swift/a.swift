// Code generated by "next v0.0.4"; DO NOT EDIT.

import Foundation
/// XX constant
/// XX value 2
public let XX: Int32 = 1 // XX value
/// Constants
public let ServerName: String = "Comprehensive Test Server"
public let Version: String = "1.0.0"
public let MaxConnections: Int32 = 1000
public let Pi: Double = 3.14159265358979323846
public let MaxInt64: Int64 = 9223372036854775807 // 2^63 - 1
public let MinInt64: Int64 = -9223372036854775808 // -2^63
/// Constants with complex expressions
public let A: Int32 = 1
public let B: Int32 = 3
public let C: Int32 = 9
public let D: Int32 = 7
public let E: Int32 = 28
public let F: Int32 = 1052
public let G: Int32 = 1052
public let H: Int32 = 5672
public let I: Double = 5673.618 // Approximation of golden ratio
public let J: Double = 47.28015 // 120 is 5!
/// Constants with function calls
public let StringLength: Int32 = 13
public let MinValue: Int32 = 1
public let MaxValue: Int32 = 5673
/// Constants using built-in functions
public let IntFromBool: Int32 = 1
public let IntFromFloat: Int32 = 3
public let FloatFromInt: Float = 42.0
public let FloatFromBool: Float = 0
public let BoolFromInt: Bool = true
public let BoolFromString: Bool = true
public let FormattedString1: String = "The answer is 42"
public let FormattedString2: String = "Pi is approximately 3.14"
public let FormattedString3: String = "Hello World\n"
/// Constants for testing complex expressions and bitwise operations
public let Complex1: Int32 = 5673
public let Complex2: Int32 = 78547
public let Complex3: Int32 = 31
public let Complex4: Int32 = 31
public let Complex5: Int32 = 31

/// Enum with iota
public enum Color {
    case red = 1
    case green = 2
    case blue = 4
    case alpha = 8
    case yellow = 3
    case cyan = 6
    case magenta = 5
    case white = 7
}

/// Enum with complex iota usage
public enum FilePermission {
    case none = 0
    case execute = 1
    case write = 2
    case read = 4
    case userRead = 4
    case userWrite = 32
    case userExecute = 256
    case groupRead = 2048
    case groupWrite = 16384
    case groupExecute = 131072
    case othersRead = 1048576
    case othersWrite = 8388608
    case othersExecute = 67108864
    /// 4|32|256|2048|16384|131072|1048576|8388608|67108864
    /// 4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864
    case all = 76695844
}

public enum Day {
    case monday = 1
    case tuesday = 2
    case wednesday = 4
    case thursday = 8
    case friday = 16
    case saturday = 32
    case sunday = 64
    case weekday = 31
    case weekend = 96
}

public enum Month {
    case january = 1
    case february = 2
    case march = 4
    case april = 8
    case may = 16
    case june = 32
    case july = 64
    case august = 128
    case september = 256
    case october = 512
    case november = 1024
    case december = 2048
    case q1 = 7
    case q2 = 56
    case q3 = 448
    case q4 = 3584
}

/// Test cases for iota
public enum IotatestEnum {
    case a = 0 // 0
    case b = 1 // 1
    case c = 0 // 0
    case d = 2 // 2
    case e = 0 // 0
    case f = 1 // 1
    case g = 0 // 0
}

/// Struct types
public struct Point2D {
    public var x: Double
    public var y: Double

    public init() {
        self.x = 0
        self.y = 0
    }
}

public struct Point3D {
    public var point: Point2D
    public var z: Double

    public init() {
        self.point = Point2D()
        self.z = 0
    }
}

public struct Rectangle {
    public var topLeft: Point2D
    public var bottomRight: Point2D

    public init() {
        self.topLeft = Point2D()
        self.bottomRight = Point2D()
    }
}

/// Struct with various field types
public struct ComplexStruct {
    public var flag: Bool
    public var tinyInt: Int8
    public var smallInt: Int16
    public var mediumInt: Int32
    public var bigInt: Int64
    public var defaultInt: Int
    public var singlePrecision: Float
    public var doublePrecision: Double
    public var text: String
    public var singleByte: UInt8
    public var byteArray: [UInt8]
    public var fixedArray: [Int]
    public var dynamicArray: [String]
    public var intArray: [Int]
    public var dictionary: [String:Int]

    public init() {
        self.flag = false
        self.tinyInt = 0
        self.smallInt = 0
        self.mediumInt = 0
        self.bigInt = 0
        self.defaultInt = 0
        self.singlePrecision = 0
        self.doublePrecision = 0
        self.text = ""
        self.singleByte = 0
        self.byteArray = Data()
        self.fixedArray = []
        self.dynamicArray = []
        self.intArray = []
        self.dictionary = [:]
    }
}

public struct User {
    public var id: Int64
    public var username: String
    public var email: String
    public var preferredDay: Day
    public var birthMonth: Month

    public init() {
        self.id = 0
        self.username = ""
        self.email = ""
        self.preferredDay = Day.monday
        self.birthMonth = Month.january
    }
}

public struct UserProfile {
    public var user: User
    public var firstName: String
    public var lastName: String
    public var age: Int
    public var interests: [String]

    public init() {
        self.user = User()
        self.firstName = ""
        self.lastName = ""
        self.age = 0
        self.interests = []
    }
}

/// message types
public struct LoginRequest {
    public var username: String
    public var password: String
    public var deviceId: String
    public var twoFactorToken: String

    public init() {
        self.username = ""
        self.password = ""
        self.deviceId = ""
        self.twoFactorToken = ""
    }
}

public struct LoginResponse {
    public var success: Bool
    public var errorMessage: String
    public var authenticationToken: String
    public var user: User

    public init() {
        self.success = false
        self.errorMessage = ""
        self.authenticationToken = ""
        self.user = User()
    }
}

public struct GenericRequest {
    public var requestId: String
    public var timestamp: Int64

    public init() {
        self.requestId = ""
        self.timestamp = 0
    }
}

public struct GenericResponse {
    public var requestId: String
    public var timestamp: Int64
    public var success: Bool
    public var errorCode: String
    public var errorMessage: String

    public init() {
        self.requestId = ""
        self.timestamp = 0
        self.success = false
        self.errorCode = ""
        self.errorMessage = ""
    }
}
