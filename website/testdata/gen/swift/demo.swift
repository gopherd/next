// Code generated by "next v0.0.4"; DO NOT EDIT.

import Foundation
public let Version: String = "1.0.0" // String constant
public let MaxRetries: Int32 = 3 // Integer constant
public let Timeout: Float = 3000.0 // Float constant expression

/// Color represents different color options
/// Values: Red (1), Green (2), Blue (4), Yellow (8)
public enum Color {
    case red = 1
    case green = 2
    case blue = 4
    case yellow = 8
}

/// MathConstants represents mathematical constants
public enum MathConstants {
    case pi = 3.14159265358979323846
    case e = 2.71828182845904523536
}

/// OperatingSystem represents different operating systems
public enum OperatingSystem {
    case windows = "windows"
    case linux = "linux"
    case macOS = "macos"
    case android = "android"
    case iOS = "ios"
}

/// User represents a user in the system
public struct User {
    public var id: Int64
    public var username: String
    public var tags: [String]
    public var scores: [String:Int]
    public var coordinates: [Double]
    public var favoriteColor: Color
    public var email: String
    public var extra: Any

    public init() {
        self.id = 0
        self.username = ""
        self.tags = []
        self.scores = [:]
        self.coordinates = []
        self.favoriteColor = Color.red
        self.email = ""
        self.extra = nil
    }
}

/// uint64 represents a 64-bit unsigned integer.
/// - In Go, it is aliased as uint64
/// - In C++, it is aliased as uint64_t
/// - In Java, it is aliased as long
/// - In Rust, it is aliased as u64
/// - In C#, it is aliased as ulong
/// - In Protobuf, it is represented as uint64
/// - In other languages, it is represented as a struct with low and high 32-bit integers.
public struct Uint64 {
    public var low: Int32
    public var high: Int32

    public init() {
        self.low = 0
        self.high = 0
    }
}

/// uint128 represents a 128-bit unsigned integer.
/// - In rust, it is aliased as u128
/// - In other languages, it is represented as a struct with low and high 64-bit integers.
public struct Uint128 {
    public var low: Uint64
    public var high: Uint64

    public init() {
        self.low = Uint64()
        self.high = Uint64()
    }
}

/// Contract represents a smart contract
public struct Contract {
    public var address: Uint128
    public var data: Any

    public init() {
        self.address = Uint128()
        self.data = nil
    }
}

/// LoginRequest represents a login request message (type 101)
/// @message annotation is a custom annotation that generates message types.
public struct LoginRequest {
    public var username: String
    public var password: String
    /// @optional annotation is a custom annotation that marks a field as optional.
    public var device: String
    public var os: OperatingSystem
    public var timestamp: Int64

    public init() {
        self.username = ""
        self.password = ""
        self.device = ""
        self.os = OperatingSystem.windows
        self.timestamp = 0
    }
}

/// LoginResponse represents a login response message (type 102)
public struct LoginResponse {
    public var token: String
    public var user: User

    public init() {
        self.token = ""
        self.user = User()
    }
}

/// Reader provides reading functionality
public protocol Reader {
    /// @next(error) applies to the method:
    /// - For Go: The method may return an error
    /// - For C++/Java: The method throws an exception
    /// 
    /// @next(mut) applies to the method:
    /// - For C++: The method is non-const
    /// - For other languages: This annotation may not have a direct effect
    /// 
    /// @next(mut) applies to the parameter buffer:
    /// - For C++: The parameter is non-const, allowing modification
    /// - For other languages: This annotation may not have a direct effect,
    ///   but indicates that the buffer content may be modified
    func read(buffer: [UInt8]) -> Int
}

/// HTTPClient provides HTTP request functionality
public protocol HTTPClient {
    /// Available for all languages
    func request(url: String, method: String, body: String) -> String
    func request2(url: String, method: String, body: String) -> String
}
