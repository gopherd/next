{{- define "next/go/file" -}}
package {{.Package.Name}}
{{super . -}}
{{- end}}

{{- define "next/go/imports" -}}
{{render "go/imports.decl" . -}}
{{render "go/imports.unused" . -}}
{{- end}}

{{- define "next/go/imports.decl" -}}
{{- range .ListForPackage}}
{{- if len .File.Package.Types}}
{{next .}}
{{- end}}
{{- end}}
{{- end}}

{{- define "next/go/import" -}}
import {{.File.Package.Name}} {{.File.Package.Annotations.next.go_package -}}
{{- end}}

{{- define "next/go/imports.unused" -}}
{{- $n := 0}}
{{- range .ListForPackage}}
{{- if len .File.Package.Types}}
{{- $n = (add ($n) 1)}}
{{- end}}
{{- end}}
{{- if $n}}
{{range $p := .ListForPackage}}
{{- if len .File.Package.Types}}
{{render "go/import.unused" .}}
{{- end}}
{{- end}}
{{- end}}
{{- end}}

{{- define "next/go/import.unused" -}}
var _ = (*{{.File.Package.Name}}.{{next (index (.File.Package.Types) 0)}})(nil)
{{- end}}

{{- define "next/go/const" -}}
{{next .Doc}}const {{.Name}} = {{.Value}}{{next .Comment}}
{{- end}}

{{- define "next/go/enum" -}}
{{next .Doc}}type {{.Name}} int

const (
{{- next .Members}}
)
{{- end}}

{{- define "next/go/enum.member" -}}
{{next .Doc}}{{.Enum.Name}}_{{.Name}} = {{.Value}}{{next .Comment}}
{{- end}}

{{- define "next/go/struct" -}}
{{next .Doc}}type {{.Name}} struct {
    {{- next .Fields}}
}
{{- end}}

{{- define "next/struct.field" -}}
{{next .Doc}}{{next .Name}} {{next .Type}};{{next .Comment}}
{{- end}}

{{- define "next/go/struct.field.type" -}}
{{if not (.Type.Package.In .Field.Struct.Decl.File.Package)}}{{.Type.Package.Name}}.{{end}}{{next .Type}}
{{- end}}

{{- define "next/go/struct.field.name" -}}
{{. | pascalCase }}
{{- end}}

{{- define "next/go/interface" -}}
{{next .Doc}}type {{.Name}} interface {
    {{- next .Methods}}
}
{{- end}}

{{- define "next/go/interface.method.param" -}}
{{next .Name}} {{next .Type}}
{{- end}}

{{- define "next/go/interface.method.param.type" -}}
{{if not (.Type.Package.In .Param.Method.Interface.Decl.File.Package)}}{{.Type.Package.Name}}.{{end}}{{next .Type}}
{{- end}}

{{- define "next/go/interface.method.return.type" -}}
{{- if .Type}} {{if not (.Type.Package.In .Method.Interface.Decl.File.Package)}}{{.Type.Package.Name}}.{{end}}{{next .Type}}
{{- end}}
{{- end}}