{{/* next/python/file: Generates the main structure for a Python file */}}
{{- define "next/python/file" -}}
{{next .Imports -}}
{{next .Decls -}}
{{- end}}

{{/* next/python/imports: Generates import statements for Python */}}
{{- define "next/python/imports" -}}
from typing import List, Dict, Any

{{if .TrimmedList}}
{{- range .TrimmedList}}
{{- next .}}
{{- end}}
{{end}}
{{- end}}

{{/* next/python/import: Generates an import statement for a specific module */}}
{{- define "next/python/import" -}}
from {{.File.Package.Name}} import *
{{end}}

{{/* next/python/comment: Generates line comments for Python */}}
{{- define "next/python/comment" -}}
{{- if .Text -}}
{{_}} # {{.Text}}
{{- end}}
{{- end}}

{{/* next/python/doc: Generates documentation comments for Python */}}
{{- define "next/python/doc" -}}
{{.Format "" "\"\"\"\n" "\"\"\""}}
{{- end}}

{{/* next/python/const: Generates a constant declaration */}}
{{- define "next/python/const" -}}
{{- next .Doc -}}
{{- render "const:name" . | snakeCase | upper}} = {{next .Value}}{{next .Comment}}
{{end}}

{{/* next/python/enum: Generates an enum class declaration */}}
{{- define "next/python/enum" -}}
{{- next .Doc -}}
class {{next .Type}}:
    {{next .Members | align -}}
{{end}}

{{/* next/python/enum.member: Generates an enum member */}}
{{- define "next/python/enum.member" -}}
{{- next .Doc -}}
{{- render "enum.member:name" .}} = {{next .Value}}{{next .Comment}}
{{end}}

{{/* next/python/enum.member:name: Generates the name for an enum member */}}
{{- define "next/python/enum.member:name" -}}
{{- .Name | snakeCase | upper}}
{{- end}}

{{/* next/python/struct: Generates a class declaration */}}
{{- define "next/python/struct" -}}
{{- next .Doc -}}
class {{next .Type}}:
    def __init__(self):
        {{next .Fields | align -}}
{{end}}

{{/* next/python/struct.field: Generates a class field declaration */}}
{{- define "next/python/struct.field" -}}
{{- next .Doc -}}
self.{{render "struct.field:name" .}} = {{render "type:zero" .Type}}{{next .Comment}}
{{end}}

{{/* next/python/struct.field:name: Generates the name for a class field */}}
{{- define "next/python/struct.field:name" -}}
{{- .Name | snakeCase}}
{{- end}}

{{/* next/python/interface: Generates an abstract base class declaration */}}
{{- define "next/python/interface" -}}
{{- next .Doc -}}
from abc import ABC, abstractmethod

class {{next .Type}}(ABC):
    {{next .Methods | align -}}
{{end}}

{{/* next/python/interface.method: Generates an abstract method declaration */}}
{{- define "next/python/interface.method" -}}
"""
{{if .Doc.Text -}}
{{.Doc.Text -}}
{{end -}}
{{- if .Params.List}}
Args:
{{- range .Params.List}}
    {{render "interface.method.param:name" .}} ({{next .Type}})
{{- end}}
{{- end}}
{{- if .Result.Type}}
Returns:
    {{next .Result.Type}}
{{- end}}
"""
@abstractmethod
def {{render "interface.method:name" .}}(self{{if .Params.List}}, {{next .Params}}{{end}}){{next .Result}}:
    pass
{{end}}

{{/* next/python/interface.method:name: Generates the name for an interface method */}}
{{- define "next/python/interface.method:name" -}}
{{- snakeCase .Name}}
{{- end}}

{{/* next/python/interface.method.param: Generates a parameter for an interface method */}}
{{- define "next/python/interface.method.param" -}}
{{- render "interface.method.param:name" .}}: {{next .Type}}
{{- end}}

{{/* next/python/interface.method.result: Generates the return type for an interface method */}}
{{- define "next/python/interface.method.result" -}}
{{- if .Type}} -> {{next .Type}}{{end -}}
{{- end}}

{{/* next/python/used.type: Generates a fully qualified type name */}}
{{- define "next/python/used.type" -}}
{{- if and (not (.File.Package.Contains .Type)) (.Type.Decl.File)}}
{{- .Type.Decl.File.Package.Name}}.
{{- end}}
{{- next .Type}}
{{- end}}

{{/* next/python/type:zero: Generates a zero value for a given type */}}
{{- define "next/python/type:zero" -}}
{{- if .Kind.IsNumeric -}}
0
{{- else if .Kind.IsString -}}
""
{{- else if .Kind.IsBool -}}
False
{{- else if .Kind.IsArray -}}
[{{render "type:zero" .Actual.ElemType}} for _ in range({{.Actual.N}})]
{{- else if .Kind.IsMap -}}
{}
{{- else if .Kind.IsVector -}}
[]
{{- else if .Kind.IsBytes -}}
b""
{{- else if .Kind.IsAny -}}
None
{{- else if .Kind.IsStruct -}}
{{next .}}()
{{- else if .Kind.IsEnum -}}
{{next .}}({{render "type:zero" .Actual.Decl.MemberType}})
{{- else -}}
None
{{- end -}}
{{- end}}