{{/* next/cpp/file: Generates the main structure for a C++ header file */}}
{{- define "next/cpp/file" -}}
#pragma once

{{next .Imports -}}
{{render "file:namespace.begin" . -}}
{{render "file:forward.declarations" . -}}
{{next .Decls}}
{{render "file:namespace.end" . -}}
{{- end}}

{{/* next/cpp/imports: Generates standard C++ include statements and user-defined imports */}}
{{- define "next/cpp/imports" -}}
#include <any>
#include <array>
#include <cstdint>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>
{{- if .List}}
{{range .List}}
{{- next .}}
{{- end}}
{{- end}}
{{- end}}

{{/* next/cpp/import: Generates an include statement for a user-defined header */}}
{{- define "next/cpp/import" -}}
#include "{{.Target.Name}}.h"
{{end}}

{{/* next/cpp/used.type: Generates a fully qualified type name, including namespace if necessary */}}
{{- define "next/cpp/used.type" -}}
{{if not (.File.Package.Contains .Type) -}}
{{$ns := .Type.Decl.File.Package.Annotations.next.cpp_package -}}
{{if $ns -}}
{{$ns}}::
{{- end -}}
{{- end -}}
{{next .Type}}
{{- end}}

{{/* next/cpp/file:namespace.begin: Begins a namespace block if a C++ package is specified */}}
{{- define "next/cpp/file:namespace.begin" -}}
{{- $ns := .Annotations.next.cpp_package -}}
{{- if $ns}}

namespace {{$ns}} {
{{end}}
{{- end}}

{{/* next/cpp/file:namespace.end: Ends a namespace block if a C++ package is specified */}}
{{- define "next/cpp/file:namespace.end" -}}
{{- $ns := .Annotations.next.cpp_package -}}
{{- if $ns -}}
} // namespace {{$ns}}
{{- end}}
{{- end}}

{{/* next/cpp/file:forward.declarations: Generates forward declarations for enums and classes */}}
{{- define "next/cpp/file:forward.declarations" -}}

{{- $n := 0 -}}
{{- range .Decls.Enums.List}}
{{- if not .Annotations.next.cpp_alias}}
{{- $n = add 1 $n}}
{{- end}}
{{- end}}

{{- if $n -}}
    // Enums forward declarations{{println}}
    {{- range .Decls.Enums.List}}
        {{- if not .Annotations.next.cpp_alias}}
            {{- if .MemberType.Kind.IsInteger -}}
                enum class {{next .Type}};{{println}}
            {{- else -}}
                /* enum */ class {{next .Type}};{{println}}
            {{- end}}
        {{- end}}
    {{- end}}
    {{- println}}
{{- end}}

{{- $n = 0 -}}
{{- range .Decls.Structs.List}}
{{- if not .Annotations.next.cpp_alias}}
{{- $n = add 1 $n}}
{{- end}}
{{- end}}

{{- if $n -}}
    // Structs forward declarations{{println}}
    {{- range .Decls.Structs.List}}
        {{- if not .Annotations.next.cpp_alias -}}
            class {{next .Type}};{{println}}
        {{- end}}
    {{- end}}
    {{- println}}
{{- end}}

{{- end}}

{{/* next/cpp/type:literal.suffix: Generates a suffix for a literal value by type */}}
{{- define "next/cpp/type:literal.suffix" -}}
{{- render "type:literal.suffix.clike" .}}
{{- end}}

{{/* next/cpp/const: Generates a constant declaration */}}
{{- define "next/cpp/const" -}}
{{- next .Doc -}}
inline constexpr auto {{render "const:name" .}} = {{next .Value}};{{next .Comment}}
{{end}}

{{/* next/cpp/enum: Generates an enum class declaration */}}
{{- define "next/cpp/enum" -}}
{{- if not .Annotations.next.cpp_alias -}}
{{- if .MemberType.Kind.IsInteger -}}
{{- next .Doc -}}
enum class {{next .Type}} : {{render "enum:member.type" .}} {
    {{next .Members | align -}}
};
{{else -}}
/* enum */ class {{next .Type}} {
private:
    {{render "enum:member.type" .}} value;

public:
    {{next .Members | align}}
    {{next .Type}}(const {{render "enum:member.type" .}}& v) : value(v) {}

    bool operator==(const {{next .Type}}& other) const {
        return value == other.value;
    }

    operator {{render "enum:member.type" .}}() const {
        return value;
    }
};
{{end}}
{{- end}}
{{- end}}

{{/* next/cpp/enum.member: Generates an enum member */}}
{{- define "next/cpp/enum.member" -}}
    {{- next .Doc -}}
    {{- if .Decl.MemberType.Kind.IsInteger -}}
        {{- render "enum.member:name" .}} = {{next .Value}},{{next .Comment}}
    {{- else if .Decl.MemberType.Kind.IsString -}}
        static inline const {{render "enum:member.type" .Decl}} {{render "enum.member:name" .}} = {{next .Value}};
    {{- else if .Decl.MemberType.Kind.IsFloat -}}
        static inline constexpr {{render "enum:member.type" .Decl}} {{render "enum.member:name" .}} = {{next .Value}};
    {{- else -}}
        {{- error "%s: unsupported enum member type: %s" .Decl.Pos .Decl.MemberType.Kind}}
    {{- end}}
{{end}}

{{/* next/cpp/struct: Generates a class declaration (struct in C++ is typically implemented as a class) */}}
{{- define "next/cpp/struct" -}}
{{- next .Doc -}}
class {{next .Type}} {
public:
    {{next .Fields | align -}}

public:
    {{next .Type}}() = default;
    ~{{next .Type}}() = default;
};
{{end}}

{{/* next/cpp/struct.field: Generates a class member variable declaration */}}
{{- define "next/cpp/struct.field" -}}
{{- $zero := render "type:zero" .Type -}}
{{- if $zero}}{{$zero = printf " = {%s}" $zero}}{{end -}}
{{- next .Doc -}}
{{- next .Type}} {{render "struct.field:name" . | camelCase}}{{$zero}};{{next .Comment}}
{{end}}

{{/* next/cpp/interface: Generates an abstract base class declaration (interface in C++ is typically implemented as an abstract class) */}}
{{- define "next/cpp/interface" -}}
{{- next .Doc -}}
class {{next .Type}} {
public:
    virtual ~{{next .Type}}() = default;
    {{next .Methods | align -}}
};
{{end}}

{{/* next/cpp/interface.method: Generates a pure virtual method declaration */}}
{{- define "next/cpp/interface.method" -}}
{{- next .Doc -}}
virtual {{next .Result}} {{render "interface.method:name" .}}({{next .Params}}) {{if not .Annotations.next.mut}}const {{end}}= 0;{{next .Comment}}
{{end}}

{{/* next/cpp/interface.method:name: Generates the name for an interface method */}}
{{- define "next/cpp/interface.method:name" -}}
{{- snakeCase .Name}}
{{- end}}

{{/* next/cpp/interface.method.param: Generates a parameter for an interface method */}}
{{- define "next/cpp/interface.method.param" -}}
{{- if not .Annotations.next.mut}}const {{end}}{{next .Type}}& {{render "interface.method.param:name" .}}
{{- end}}

{{/* next/cpp/interface.method.result: Generates the return type for an interface method */}}
{{- define "next/cpp/interface.method.result" -}}
{{- if .Type -}}
    {{- next .Type}}
{{- else -}}
    void
{{- end}}
{{- end}}

{{/* next/cpp/type:zero: Generates a zero-initializer for a type */}}
{{- define "next/cpp/type:zero" -}}
{{- if .Kind.IsArray}}
    {{- super .Actual.ElemType}}
{{- else if .Kind.IsEnum}}
    {{- next .}}({{render "type:zero" .Actual.Decl.MemberType -}})
{{- else -}}
    {{- super .}}
{{- end -}}
{{- end}}