{{/* next/swift/file: Generates the main structure for a Swift file */}}
{{- define "next/swift/file" -}}
{{next .Imports -}}
{{next .Decls -}}
{{- end}}

{{/* next/swift/imports: Generates import statements for Swift */}}
{{- define "next/swift/imports" -}}
import Foundation
{{if .TrimmedList}}
{{- range .TrimmedList}}
{{next .}}
{{- end}}
{{end}}
{{- end}}

{{/* next/swift/import: Generates an import statement for a specific module */}}
{{- define "next/swift/import" -}}
import {{.File.Package.Name}}
{{- end}}

{{/* next/swift/doc: Generates documentation comments for Swift */}}
{{- define "next/swift/doc" -}}
{{.Format "" "" "///" | align}}
{{- end}}

{{/* next/swift/const: Generates a constant declaration */}}
{{- define "next/swift/const" -}}
{{next .Doc}}public let {{render "const:name" .}}: {{next .Type}} = {{.Value}}{{next .Comment}}
{{- end}}

{{/* next/swift/enum: Generates an enum declaration */}}
{{- define "next/swift/enum" -}}
{{next .Doc}}public enum {{next .Type}} {
    {{- next .Members}}
}
{{- end}}

{{/* next/swift/enum.member: Generates an enum member */}}
{{- define "next/swift/enum.member" -}}
{{next .Doc}}case {{render "enum.member:name" .}} = {{.Value}}{{next .Comment}}
{{- end}}

{{/* next/swift/enum.member:name: Generates the name for an enum member */}}
{{- define "next/swift/enum.member:name" -}}
{{.Name | camelCase}}
{{- end}}

{{/* next/swift/struct: Generates a struct declaration */}}
{{- define "next/swift/struct" -}}
{{next .Doc}}public struct {{next .Type}} {
    {{- next .Fields}}

    public init() {
        {{- range .Fields.List}}
        self.{{render "struct.field:name" .}} = {{render "type:zero" .Type}}
        {{- end}}
    }
}
{{- end}}

{{/* next/swift/struct.field: Generates a struct field declaration */}}
{{- define "next/swift/struct.field" -}}
{{next .Doc}}public var {{render "struct.field:name" .}}: {{next .Type}}{{next .Comment}}
{{- end}}

{{/* next/swift/struct.field:name: Generates the name for a struct field */}}
{{- define "next/swift/struct.field:name" -}}
{{.Name | camelCase}}
{{- end}}

{{/* next/swift/interface: Generates a protocol declaration */}}
{{- define "next/swift/interface" -}}
{{next .Doc}}public protocol {{next .Type}} {
    {{- next .Methods}}
}
{{- end}}

{{/* next/swift/interface.method: Generates a method declaration in a protocol */}}
{{- define "next/swift/interface.method" -}}
{{next .Doc}}func {{render "interface.method:name" .}}({{next .Params}}){{next .Result}}{{next .Comment}}
{{- end}}

{{/* next/swift/interface.method:name: Generates the name for an interface method */}}
{{- define "next/swift/interface.method:name" -}}
{{camelCase .Name}}
{{- end}}

{{/* next/swift/interface.method.param: Generates a parameter for an interface method */}}
{{- define "next/swift/interface.method.param" -}}
{{render "interface.method.param:name" .}}: {{next .Type}}
{{- end}}

{{/* next/swift/interface.method.param:name: Generates the name for an interface method parameter */}}
{{- define "next/swift/interface.method.param:name" -}}
{{.Name | camelCase}}
{{- end}}

{{/* next/swift/interface.method.result: Generates the return type for an interface method */}}
{{- define "next/swift/interface.method.result" -}}
{{- if .Type}} -> {{next .Type}}{{end -}}
{{- end}}

{{/* next/swift/used.type: Generates a fully qualified type name */}}
{{- define "next/swift/used.type" -}}
{{- if and (not (.File.Package.Contains .Type)) (.Type.Decl.File) -}}
{{.Type.Decl.File.Package.Name}}.
{{- end -}}
{{next .Type -}}
{{- end}}

{{/* next/swift/type:zero: Generates a zero value for a given type */}}
{{- define "next/swift/type:zero" -}}
{{- if .Kind.IsNumeric -}}
0
{{- else if .Kind.IsString -}}
""
{{- else if .Kind.IsBool -}}
false
{{- else if .Kind.IsArray -}}
[]
{{- else if .Kind.IsMap -}}
[:]
{{- else if .Kind.IsVector -}}
[]
{{- else if .Kind.IsBytes -}}
Data()
{{- else if .Kind.IsAny -}}
nil
{{- else if .Kind.IsStruct -}}
{{next .}}()
{{- else if .Kind.IsEnum -}}
{{next .}}.{{render "enum.member:name" (index .Value.Decl.Members.List 0)}}
{{- else -}}
nil
{{- end -}}
{{- end}}