{{- define "next/csharp/file" -}}
using System;
using System.Collections.Generic;

namespace {{render "csharp/package:namespace" .Package}}
{
    {{next .Imports | align -}}
    {{next .Decls | align}}
}
{{- end}}

{{- define "next/csharp/package:namespace" -}}
{{.Name}}
{{- end}}

{{- define "next/csharp/imports" -}}
{{- if .TrimmedList}}
{{- range .TrimmedList}}
{{- next . -}}
{{- end}}
{{- end}}
{{- end}}

{{- define "next/csharp/import" -}}
using {{render "csharp/package:namespace" .File.Package}};
{{- end}}

{{- define "next/csharp/const" -}}
{{next .Doc}}public const {{next .Type}} {{render "csharp/const:name" .}} = {{.Value}};{{next .Comment}}
{{- end}}

{{- define "next/csharp/enum" -}}
{{next .Doc}}public enum {{next .Type}}
{
    {{- next .Members}}
}
{{- end}}

{{- define "next/csharp/enum.member" -}}
{{next .Doc}}{{render "csharp/enum.member:name" .}} = {{.Value}},{{next .Comment}}
{{- end}}

{{- define "next/csharp/struct" -}}
{{next .Doc}}public class {{next .Type}}
{
    {{- next .Fields}}
}
{{- end}}

{{- define "next/csharp/struct.field" -}}
{{next .Doc}}public {{next .Type}} {{render "csharp/struct.field:name" .}} { get; set; }{{next .Comment}}
{{- end}}

{{- define "next/csharp/struct.field.name" -}}
{{.String | pascalCase}}
{{- end}}

{{- define "next/csharp/interface" -}}
{{next .Doc}}public interface {{next .Type}}
{
    {{- next .Methods}}
}
{{- end}}

{{- define "next/csharp/interface.method" -}}
{{next .Doc}}{{next .Result}} {{render "csharp/interface.method:name" .}}({{next .Params}});{{next .Comment}}
{{- end}}

{{- define "next/csharp/interface.method.result" -}}
{{if .Type}}{{next .Type}}{{else}}void{{end}}
{{- end}}

{{- define "next/csharp/interface.method.param" -}}
{{if .Annotations.next.mut}}ref {{end}}{{next .Type}} {{render "csharp/interface.method.param:name" .}}
{{- end}}