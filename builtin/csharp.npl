{{/* next/csharp/file: Generates the main structure for a C# file */}}
{{- define "next/csharp/file" -}}
using System;
using System.Collections.Generic;

namespace {{render "package:name" .Package}}
{
	{{- next .Decls | indent | linespace -}}
}
{{- end}}

{{/* next/csharp/package:name: Generates the namespace name */}}
{{- define "next/csharp/package:name" -}}
{{with .Annotations.next.csharp_package}}{{.}}{{else}}{{.Name}}{{end}}
{{- end}}

{{/* next/csharp/used.type: Generates a fully qualified type name, including namespace if necessary */}}
{{- define "next/csharp/used.type" -}}
	{{- if not (.File.Package.Has .Type)}}
		{{- render "package:name" .Decl.File.Package}}.
	{{- end}}
	{{- next .Type}}
{{- end}}

{{/* next/csharp/imports: Generates using statements for imported namespaces */}}
{{- define "next/csharp/imports" -}}
{{- range .TrimmedList}}
{{- next .}}
{{- end}}
{{- end}}

{{/* next/csharp/import: Generates a using statement for a specific imported namespace */}}
{{- define "next/csharp/import"}}
using {{render "package:name" .Target.Package}};
{{- end}}

{{/* next/csharp/const: Generates a constant declaration */}}
{{- define "next/csharp/const"}}
{{next .Doc -}}
public const {{next .Type}} {{render "const:name" .}} = {{next .Value}};{{next .Comment}}
{{- end}}

{{/* next/csharp/enum: Generates an enum declaration */}}
{{- define "next/csharp/enum"}}
{{next .Doc -}}
public enum {{next .Type}}
{
	{{- next .Members | indent | linespace -}}
}
{{end}}

{{/* next/csharp/enum.member: Generates an enum member */}}
{{- define "next/csharp/enum.member"}}
{{next .Doc -}}
{{- render "enum.member:name" .}} = {{next .Value}},{{next .Comment}}
{{- end}}

{{/* next/csharp/struct: Generates a class declaration (struct in C# is typically implemented as a class) */}}
{{- define "next/csharp/struct"}}
{{next .Doc -}}
public class {{next .Type}}
{
	{{- next .Fields | indent | linespace -}}
}
{{end}}

{{/* next/csharp/struct.field: Generates a property declaration for a class */}}
{{- define "next/csharp/struct.field"}}
{{next .Doc -}}
public {{next .Type}} {{render "struct.field:name" .}} { get; set; }{{next .Comment}}
{{- end}}

{{/* next/csharp/struct.field.name: Generates the name for a class property */}}
{{- define "next/csharp/struct.field:name" -}}
{{- render "node:camel.case.name" .}}
{{- end}}

{{/* next/csharp/interface: Generates an interface declaration */}}
{{- define "next/csharp/interface"}}
{{next .Doc -}}
public interface {{next .Type}}
{
	{{- next .Methods | indent | linespace -}}
}
{{end}}

{{/* next/csharp/interface.method: Generates a method declaration in an interface */}}
{{- define "next/csharp/interface.method"}}
{{next .Doc -}}
{{- next .Result}} {{render "interface.method:name" .}}({{next .Params}});{{next .Comment}}
{{- end}}

{{- define "next/csharp/interface.method:name" -}}
{{- render "node:pascal.case.name" .}}
{{- end}}

{{/* next/csharp/interface.method.result: Generates the return type for an interface method */}}
{{- define "next/csharp/interface.method.result" -}}
{{- if .Type}}{{next .Type}}{{else}}void{{end}}
{{- end}}

{{/* next/csharp/interface.method.parameter: Generates a parameter for an interface method */}}
{{- define "next/csharp/interface.method.parameter" -}}
{{- if .Annotations.next.mut}}ref {{end}}{{next .Type}} {{render "interface.method.parameter:name" .}}
{{- end}}