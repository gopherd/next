{{/* next/c/file: Generates the header guard, includes, and content for a C header file */}}
{{- define "next/c/file" -}}
#ifndef {{render "this:file.header.macro" .}}
#define {{render "this:file.header.macro" .}}

#include <stdint.h>
#include <string.h>
{{next .Imports}}
#if !defined(__cplusplus) && !defined(__bool_true_false_are_defined)
#include <stdbool.h>
#endif

#if !defined(_Bool)
typedef unsigned char _Bool;
#endif

{{render "file:forward.declarations" . -}}
{{next .Decls}}
#endif /* {{render "this:file.header.macro" .}} */
{{- end}}

{{/* next/c/file:forward.declarations: Generates forward declarations for enums and structs */}}
{{- define "next/c/file:forward.declarations" -}}

{{- $n := 0 -}}
{{- range .Decls.Enums.List}}
{{- if not .Annotations.next.c_alias}}
{{- $n = add 1 $n}}
{{- end}}
{{- end}}

{{- if $n -}}
    // Enums forward declarations{{println}}
    {{- range .Decls.Enums.List}}
        {{- if not .Annotations.next.c_alias}}
            {{- if .MemberType.Kind.IsInteger -}}
                typedef enum {{next .Type}} {{next .Type}};{{println}}
            {{- else -}}
                typedef /* enum */ struct {{next .Type}} {{next .Type}};{{println}}
            {{- end}}
        {{- end}}
    {{- end}}
    {{- println}}
{{- end}}

{{- $n = 0 -}}
{{- range .Decls.Structs.List}}
{{- if not .Annotations.next.c_alias}}
{{- $n = add 1 $n}}
{{- end}}
{{- end}}

{{- if $n -}}
    // Structs forward declarations{{println}}
    {{- range .Decls.Structs.List}}
        {{- if not .Annotations.next.c_alias -}}
            typedef struct {{next .Type}} {{next .Type}};{{println}}
        {{- end}}
    {{- end}}
    {{- println}}
{{- end}}

{{- end}}

{{/* next/c/decl.name: Generates a declaration name with the C package prefix */}}
{{- define "next/c/decl.name" -}}
{{this.File.Annotations.next.c_package | upper}}{{.}}
{{- end}}

{{/* next/c/this:file.header.macro: Generates the header guard macro name */}}
{{- define "next/c/this:file.header.macro" -}}
{{render "decl.name" this.Name | upper}}_H
{{- end}}

{{/* next/c/doc: Generates formatted documentation comments */}}
{{- define "next/c/doc" -}}
{{render "doc:clike" .}}
{{- end}}

{{/* next/c/comment: Generates inline comments */}}
{{- define "next/c/comment" -}}
{{- with .Text | trim -}}
{{_}} /* {{.}} */
{{- end}}
{{- end}}

{{/* next/c/imports: Generates include statements for imported files */}}
{{- define "next/c/imports" -}}
{{- if .List}}
{{range .List}}
{{- next .}}
{{- end}}
{{- end}}
{{- end}}

{{/* next/c/import: Generates an include statement for a specific imported file */}}
{{- define "next/c/import" -}}
#include "{{.Target.Name}}.h"
{{end}}

{{/* next/c/used.type: Generates a fully qualified type name, including prefix if necessary */}}
{{- define "next/c/used.type" -}}
{{- if not (.File.Package.Contains .Type)}}
    {{- $ns := .Type.Decl.File.Package.Annotations.next.c_package}}
    {{- if $ns -}}
        {{- $ns}}{{type .Type}}
    {{- end -}}
{{- else -}}
    {{- next .Type}}
{{- end -}}
{{- end}}

{{/* next/c/type:literal.suffix: Generates a suffix for a literal value by type */}}
{{- define "next/c/type:literal.suffix" -}}
{{- render "type:literal.suffix.clike" .}}
{{- end}}

{{/* next/c/const: Generates a constant definition using #define */}}
{{- define "next/c/const" -}}
{{next .Doc -}}
#define {{render "const:name" .}} {{next .Value}}{{next .Comment}}
{{end}}

{{/* next/c/const:name: Generates the name for a constant */}}
{{- define "next/c/const:name" -}}
{{render "decl.name" (.Name | snakeCase) | upper}}
{{- end}}

{{/* next/c/enum: Generates an enum type declaration */}}
{{- define "next/c/enum" -}}
{{- next .Doc -}}
{{- if .MemberType.Kind.IsInteger -}}
typedef enum {{next .Type}} {
    {{next .Members | align -}}
} {{next .Type}};
{{else -}}
typedef struct {{next .Type}} {
{{- if .MemberType.Kind.IsString}}
    const char* value;
{{- else if .MemberType.Kind.IsFloat}}
    double value;
{{- else}}
    {{error "%s: unsupported enum member type: %s" .Pos .MemberType.Kind}}
{{- end}}
} {{next .Type}};

{{range .Members.List}}
{{- next .}}
{{- end}}
{{- end}}
{{- end}}

{{/* next/c/enum.member: Generates an enum member */}}
{{- define "next/c/enum.member" -}}
{{- next .Doc -}}
{{- if .Decl.MemberType.Kind.IsInteger -}}
{{next .Decl.Type}}_{{render "enum.member:name" .}} = {{next .Value}},{{next .Comment}}
{{- else -}}
#define {{next .Decl.Type}}_{{render "enum.member:name" .}} (({{next .Decl.Type}}){ {{- next .Value -}} }){{next .Comment}}
{{- end}}
{{end}}

{{/* next/c/struct: Generates a struct type declaration */}}
{{- define "next/c/struct" -}}
{{- next .Doc -}}
typedef struct {{next .Type}} {
    {{next .Fields | align -}}
} {{next .Type}};
{{end}}

{{/* next/c/struct.field: Generates a struct field declaration */}}
{{- define "next/c/struct.field" -}}
{{- next .Doc -}}
{{render "dict:struct.field.decl" (dict "type" .Type "name" (render "struct.field:name" .))}};{{next .Comment}}
{{end}}

{{- define "next/c/dict:struct.field.decl" -}}
{{- $type := .type -}}
{{- $name := .name -}}
{{- if $type.Kind.IsArray -}}
{{render "dict:struct.field.decl" (dict "type" $type.Actual.ElemType "name" (printf "%s[%d]" $name $type.Actual.N))}}
{{- else -}}
{{next $type}} {{$name}}
{{- end}}
{{- end}}

{{/* next/c/interface: Generates an interface declaration as a struct with function pointers */}}
{{- define "next/c/interface" -}}
{{- next .Doc -}}
typedef struct {{next .Type}} {{next .Type}};

struct {{next .Type}} {
    void* context;
{{- range .Methods.List}}
    {{next .Result}} (*{{render "interface.method:name" .}})({{next $.Type}}* self{{if .Params.List}}, {{next .Params}}{{end}});
{{- end}}
};
{{- range .Methods.List}}

{{next .Doc}}static inline {{next .Result}} {{next $.Type}}_{{render "interface.method:name" .}}({{next $.Type}}* self{{if .Params.List}}, {{next .Params}}{{end}}) {
    return self->{{render "interface.method:name" .}}(self{{if .Params.List}}, {{render "interface.method.params:names" .Params}}{{end}});
}
{{- end}}
{{end}}

{{/* next/c/interface.method:name: Generates the name for an interface method */}}
{{- define "next/c/interface.method:name" -}}
{{snakeCase .Name}}
{{- end}}

{{/* next/c/interface.method.param: Generates a parameter declaration for an interface method */}}
{{- define "next/c/interface.method.param" -}}
{{next .Type}} {{render "interface.method.param:name" .}}
{{- end}}

{{/* next/c/interface.method.param:name: Generates the name for an interface method parameter */}}
{{- define "next/c/interface.method.param:name" -}}
{{.Name}}
{{- end}}

{{/* next/c/interface.method.result: Generates the return type for an interface method */}}
{{- define "next/c/interface.method.result" -}}
{{- if .Type}}{{next .Type}}{{else}}void{{end -}}
{{- end}}

{{/* next/c/interface.method.params: Generates parameter declarations for an interface method */}}
{{- define "next/c/interface.method.params" -}}
{{- range $i, $p := .List -}}
    {{if $i}}, {{end}}{{next $p -}}
{{- end -}}
{{- end}}

{{/* next/c/interface.method.params:names: Generates parameter names for an interface method call */}}
{{- define "next/c/interface.method.params:names" -}}
{{- range $i, $p := .List -}}
    {{if $i}}, {{end}}{{render "interface.method.param:name" $p -}}
{{- end -}}
{{- end}}

{{/* next/c/decl.type: Generates a declaration type name */}}
{{- define "next/c/decl.type" -}}
{{super . | render "decl.name"}}
{{- end}}