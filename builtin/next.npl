{{- define "next/file" -}}
{{next .Imports -}}
{{next .Decls -}}
{{- end}}

{{- define "next/decls" -}}
{{- if .Consts -}}
{{next .Consts}}
{{end -}}
{{- if .Enums -}}
{{next .Enums}}
{{end -}}
{{- if .Structs -}}
{{next .Structs}}
{{end -}}
{{- if .Interfaces -}}
{{next .Interfaces}}
{{end -}}
{{- end}}

{{- define "next/comment" -}}
{{align .Text}}
{{- end}}

{{- define "next/doc" -}}
{{align .Text}}
{{- end}}

{{- define "next/imports" -}}
{{- range .List}}
{{next . -}}
{{- end}}
{{- end}}

{{- define "next/import" -}}
import "{{.Path}}";
{{- end}}

{{- define "next/consts" -}}
{{range .List}}
{{next . -}}
{{- end}}
{{- end}}

{{- define "next/const" -}}
{{next .Doc}}const {{next .Name}} = {{.Value}};{{next .Comment}}
{{- end}}

{{- define "next/const.name" -}}
{{.}}
{{- end}}

{{- define "next/enums" -}}
{{render "next/decl:types" .}}
{{- end}}

{{- define "next/enum" -}}
enum {{next .Type}} {
    {{- next .Members}}
}
{{- end}}

{{- define "next/type.enum" -}}
{{render "next/type:internal.alias" .}}
{{- end}}

{{- define "next/enum.members" -}}
{{- range .List}}
    {{next . -}}
{{- end}}
{{- end}}

{{- define "next/enum.member" -}}
{{next .Doc}}{{next .Name}} = {{.Value}},{{next .Comment}}
{{- end}}

{{- define "next/enum.member.name" -}}
{{.}}
{{- end}}

{{- define "next/structs" -}}
{{render "next/decl:types" .}}
{{- end}}

{{- define "next/struct" -}}
{{next .Doc}}struct {{next .Type}} {
    {{- next .Fields}}
}
{{- end}}

{{- define "next/type.struct" -}}
{{render "next/type:internal.alias" .}}
{{- end}}

{{- define "next/struct.fields" -}}
{{- range .List}}
    {{next . -}}
{{- end}}
{{- end}}

{{- define "next/struct.field" -}}
{{next .Doc}}{{next .Type}} {{next .Name}};{{next .Comment}}
{{- end}}

{{- define "next/struct.field.type" -}}
{{next .Type}}
{{- end}}

{{- define "next/struct.field.name" -}}
{{.}}
{{- end}}

{{- define "next/interfaces" -}}
{{render "next/decl:types" .}}
{{- end}}

{{- define "next/decl:types" -}}
{{- $n := 0 -}}
{{range .List}}
    {{- if or (not .Annotations.next) (not (index .Annotations.next (printf "%s_alias" lang))) }}
{{_}}
        {{- if $n}}{{print "\n"}}{{end -}}
            {{next .}}
        {{- end}}
    {{- $n = add 1 $n}}
{{- end}}
{{- end}}

{{- define "next/interface" -}}
{{next .Doc}}interface {{next .Type}} {
    {{- next .Methods}}
}
{{- end}}

{{- define "next/type.interface" -}}
{{render "next/type:internal.alias" .}}
{{- end}}

{{- define "next/interface.methods" -}}
{{- range .List}}
    {{next . -}}
{{- end}}
{{- end}}

{{- define "next/interface.method" -}}
{{next .Doc}}{{next .Name}}({{next .Params}}){{next .Return}}{{next .Comment}}
{{- end}}

{{- define "next/interface.method.name" -}}
{{.}}
{{- end}}

{{- define "next/interface.method.params" -}}
{{- range $i, $p := .List -}}
    {{if $i}}, {{end}}{{next . -}}
{{- end}}
{{- end}}

{{- define "next/interface.method.param" -}}
{{next .Type}} {{next .Name}}
{{- end}}

{{- define "next/interface.method.param.type" -}}
{{next .Type}}
{{- end}}

{{- define "next/interface.method.param.name" -}}
{{.}}
{{- end}}

{{- define "next/interface.method.return" -}}
{{- if .Type}} {{next .Type}}
{{- end}}
{{- end}}

{{- define "next/type:internal.alias" -}}
{{- if or (not .Decl.Annotations.next) (not (index .Decl.Annotations.next (printf "%s_alias" lang))) }}
{{- render "type" . -}}
{{- else -}}
{{- render "type:alias" . | trim -}}
{{- end}}
{{- end}}

{{- define "next/type" -}}
{{- type . -}}
{{- end}}

{{- define "next/type:alias" -}}
{{- errorf "%s_alias not supported! Did you define \"%s/type:alias\"?" (lang) (lang) -}}
{{- end}}

{{- define "next/type:used" -}}
{{- next .Type -}}
{{- end}}