@next(
    go_package="github.com/next/next/testdata/gen/go/demo",
    cpp_namespace="demo",
    java_package="com.example.demo",
)
package demo;

const Version = "1.0.0";
const MaxRetries = 3;
const Timeout = MaxRetries * 1000; // Constant expression

// Color is an enum type
// Red: 1, Green: 2, Blue: 4, Yellow: 8
enum Color {
    Red = 1 << iota;
    Green;
    Blue;
    Yellow;
}

// User is a struct type
struct User {
    int64 id;
    string username;
    vector<string> tags;
    map<string, int> scores;
    array<float64, 3> coordinates;
    Color favoriteColor;

    any extra;
}

// LoginRequest is a message which type is 101
@message(type=101)
struct LoginRequest {
    string username;
    string password;
}

// LoginResponse is a message which type is 102
@message(type=102)
struct LoginResponse {
    string token;
    User user;
}

// AuthService is a service which has a method Login
interface AuthService {
    // @next(error) indicates that the method may return an error, e.g.
    // - Throws an exception for c++/java.
    // - Returns (LoginResponse, error) for go.
    //
    // @next(mut) applies to the method Login indicating that the method may mutate the object.
    // For c++, method is const by default, and it is a non-const if @next(mut) is present.
    @next(error, mut)
    Login(LoginRequest request) LoginResponse;
}

// HelloService is a service which has a method Hello
interface HelloService {
    Hello(string name);
    GetName() string;

    @next(error, mut)
    Print();
}

// Level is an enum type for logging
@next(type="int8")
enum Level {
    Debug = iota;
    Info;
    Warn;
    Error;
}

interface Logger {
    Debug(string x, vector<any> values);
    GetLevel() Level;
    @next(mut)
    SetLevel(Level level);
}

interface Reader {
    // @next(mut) applies to the parameter buffer indicating that the buffer may be modified.
    // For c++, the parameter is const by default, and it is a non-const if @next(mut) is present.
    Read(@next(mut) bytes buffer) int;
}

interface Writer {
    @next(mut)
    Write(bytes data) int;
}

interface ReadWriter {
    Read(@next(mut) bytes buffer) int;
    @next(mut)
    Write(bytes data) int;
}