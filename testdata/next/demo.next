@next(
    go_package="github.com/next/next/testdata/gen/go/demo",
    // import "net/http" for go_alias "net/http.HandlerFunc"
    // import "fmt" for demonstrating import with go type
    //
    // - path/to/pkg.Func (or Var, Const, etc.)
    // - *path/to/pkg.Type
    //
    // Please don't duplicate the import path, like: "net/http.HandlerFunc", "*net/http.Server"
    go_imports="net/http.HandlerFunc,*fmt.Stringer",
    cpp_namespace="demo",
    c_prefix="DEMO_",
    java_package="com.demo",
)
package demo;

const Version = "1.0.0";
const MaxRetries = 3;
const Timeout = MaxRetries * 1000; // Constant expression

// Color is an enum type
// Red: 1, Green: 2, Blue: 4, Yellow: 8
enum Color {
    Red = 1 << iota;
    Green;
    Blue;
    Yellow;
}

@next(
    available="go,cpp",
    go_alias="uint64",
    cpp_alias="uint64_t",
)
interface uint64 {}

// User is a struct type
struct User {
    int64 id;
    string username;
    vector<string> tags;
    map<string, int> scores;
    array<float64, 3> coordinates;
    Color favoriteColor;

    @next(available="go,cpp")
    uint64 timestamp;

    any extra;
}

// LoginRequest is a message which type is 101
@message(type=101)
struct LoginRequest {
    string username;
    string password;
}

// LoginResponse is a message which type is 102
@message(type=102)
struct LoginResponse {
    string token;
    User user;
}

// AuthService is a service which has a method Login
interface AuthService {
    // @next(error) indicates that the method may return an error, e.g.
    // - Throws an exception for c++/java.
    // - Returns (LoginResponse, error) for go.
    //
    // @next(mut) applies to the method Login indicating that the method may mutate the object.
    // For c++, method is const by default, and it is a non-const if @next(mut) is present.
    @next(error, mut)
    Login(LoginRequest request) LoginResponse;
}

// HelloService is a service which has a method Hello
interface HelloService {
    Hello(string name);
    GetName() string;

    @next(error, mut)
    Print();
}

// Level is an enum type for logging
@next(type=int8)
enum Level {
    Debug = iota;
    Info;
    Warn;
    Error;
}

interface Logger {
    Debug(string x, vector<any> values);
    GetLevel() Level;
    @next(mut)
    SetLevel(Level level);
}

interface Reader {
    // @next(mut) applies to the parameter buffer indicating that the buffer may be modified.
    // For c++, the parameter is const by default, and it is a non-const if @next(mut) is present.
    Read(@next(mut) bytes buffer) int;
}

interface Writer {
    @next(mut)
    Write(bytes data) int;
}

interface ReadWriter {
    Read(@next(mut) bytes buffer) int;
    @next(mut)
    Write(bytes data) int;
}

@next(
    available="go,java",
    go_alias="net/http.HandlerFunc",
    java_alias="java.util.function.Function<com.sun.net.httpserver.HttpExchange, String>",
)
interface HTTPHandlerFunc {}

@next(available="go,java")
interface HTTPServer {
    @next(error)
    HandleFunc(string path, HTTPHandlerFunc handler);
}

// HTTPClient is an interface for making HTTP requests
interface HTTPClient {
    // All is available for all languages
    All(string url) string;

    // Get is available for go and java
    @next(error, available="go,java")
    Get(string url) string;

    // Post is available for java and cpp
    @next(error, available="java,cpp")
    Post(string url, string body) string;

    // GoMethod is available for go
    @next(available="go")
    GoMethod();

    // JavaMethod is available for java
    @next(available="java")
    JavaMethod();

    // CppMethod is available for cpp
    @next(available="cpp")
    CppMethod();
}

// LanguageSpecificed is a struct type with language-specific fields
struct LanguageSpecificed {
    // id is available for all languages
    string id;

    // name is available for go, java, and cpp
    @next(available="go,java,cpp")
    string name;

    // x is available for go
    @next(available="go")
    string x;

    // y is available for java
    @next(available="java")
    string y;

    // z is available for cpp
    @next(available="cpp")
    string z;
}